// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageServiceClient is the client API for PackageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageServiceClient interface {
	CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error)
	GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error)
	GetPackageByTrackingNumber(ctx context.Context, in *GetPackageByTrackingNumberRequest, opts ...grpc.CallOption) (*GetPackageByTrackingNumberResponse, error)
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*UpdatePackageResponse, error)
	UpdatePackageStatus(ctx context.Context, in *UpdatePackageStatusRequest, opts ...grpc.CallOption) (*UpdatePackageStatusResponse, error)
	MarkPackageAsDelivered(ctx context.Context, in *MarkPackageAsDeliveredRequest, opts ...grpc.CallOption) (*MarkPackageAsDeliveredResponse, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error)
	AssignToRoute(ctx context.Context, in *AssignToRouteRequest, opts ...grpc.CallOption) (*AssignToRouteResponse, error)
	GetPackagesByRoute(ctx context.Context, in *GetPackagesByRouteRequest, opts ...grpc.CallOption) (*GetPackagesByRouteResponse, error)
}

type packageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageServiceClient(cc grpc.ClientConnInterface) PackageServiceClient {
	return &packageServiceClient{cc}
}

func (c *packageServiceClient) CreatePackage(ctx context.Context, in *CreatePackageRequest, opts ...grpc.CallOption) (*CreatePackageResponse, error) {
	out := new(CreatePackageResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/CreatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackage(ctx context.Context, in *GetPackageRequest, opts ...grpc.CallOption) (*GetPackageResponse, error) {
	out := new(GetPackageResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/GetPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackageByTrackingNumber(ctx context.Context, in *GetPackageByTrackingNumberRequest, opts ...grpc.CallOption) (*GetPackageByTrackingNumberResponse, error) {
	out := new(GetPackageByTrackingNumberResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/GetPackageByTrackingNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UpdatePackage(ctx context.Context, in *UpdatePackageRequest, opts ...grpc.CallOption) (*UpdatePackageResponse, error) {
	out := new(UpdatePackageResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/UpdatePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) UpdatePackageStatus(ctx context.Context, in *UpdatePackageStatusRequest, opts ...grpc.CallOption) (*UpdatePackageStatusResponse, error) {
	out := new(UpdatePackageStatusResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/UpdatePackageStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) MarkPackageAsDelivered(ctx context.Context, in *MarkPackageAsDeliveredRequest, opts ...grpc.CallOption) (*MarkPackageAsDeliveredResponse, error) {
	out := new(MarkPackageAsDeliveredResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/MarkPackageAsDelivered", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/DeletePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) AssignToRoute(ctx context.Context, in *AssignToRouteRequest, opts ...grpc.CallOption) (*AssignToRouteResponse, error) {
	out := new(AssignToRouteResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/AssignToRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageServiceClient) GetPackagesByRoute(ctx context.Context, in *GetPackagesByRouteRequest, opts ...grpc.CallOption) (*GetPackagesByRouteResponse, error) {
	out := new(GetPackagesByRouteResponse)
	err := c.cc.Invoke(ctx, "/deliveryplanner.PackageService/GetPackagesByRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageServiceServer is the server API for PackageService service.
// All implementations must embed UnimplementedPackageServiceServer
// for forward compatibility
type PackageServiceServer interface {
	CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error)
	GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error)
	GetPackageByTrackingNumber(context.Context, *GetPackageByTrackingNumberRequest) (*GetPackageByTrackingNumberResponse, error)
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	UpdatePackage(context.Context, *UpdatePackageRequest) (*UpdatePackageResponse, error)
	UpdatePackageStatus(context.Context, *UpdatePackageStatusRequest) (*UpdatePackageStatusResponse, error)
	MarkPackageAsDelivered(context.Context, *MarkPackageAsDeliveredRequest) (*MarkPackageAsDeliveredResponse, error)
	DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error)
	AssignToRoute(context.Context, *AssignToRouteRequest) (*AssignToRouteResponse, error)
	GetPackagesByRoute(context.Context, *GetPackagesByRouteRequest) (*GetPackagesByRouteResponse, error)
	mustEmbedUnimplementedPackageServiceServer()
}

// UnimplementedPackageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackageServiceServer struct {
}

func (UnimplementedPackageServiceServer) CreatePackage(context.Context, *CreatePackageRequest) (*CreatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePackage not implemented")
}
func (UnimplementedPackageServiceServer) GetPackage(context.Context, *GetPackageRequest) (*GetPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackage not implemented")
}
func (UnimplementedPackageServiceServer) GetPackageByTrackingNumber(context.Context, *GetPackageByTrackingNumberRequest) (*GetPackageByTrackingNumberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackageByTrackingNumber not implemented")
}
func (UnimplementedPackageServiceServer) ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedPackageServiceServer) UpdatePackage(context.Context, *UpdatePackageRequest) (*UpdatePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackage not implemented")
}
func (UnimplementedPackageServiceServer) UpdatePackageStatus(context.Context, *UpdatePackageStatusRequest) (*UpdatePackageStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePackageStatus not implemented")
}
func (UnimplementedPackageServiceServer) MarkPackageAsDelivered(context.Context, *MarkPackageAsDeliveredRequest) (*MarkPackageAsDeliveredResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkPackageAsDelivered not implemented")
}
func (UnimplementedPackageServiceServer) DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedPackageServiceServer) AssignToRoute(context.Context, *AssignToRouteRequest) (*AssignToRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssignToRoute not implemented")
}
func (UnimplementedPackageServiceServer) GetPackagesByRoute(context.Context, *GetPackagesByRouteRequest) (*GetPackagesByRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPackagesByRoute not implemented")
}
func (UnimplementedPackageServiceServer) mustEmbedUnimplementedPackageServiceServer() {}

// UnsafePackageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageServiceServer will
// result in compilation errors.
type UnsafePackageServiceServer interface {
	mustEmbedUnimplementedPackageServiceServer()
}

func RegisterPackageServiceServer(s grpc.ServiceRegistrar, srv PackageServiceServer) {
	s.RegisterService(&PackageService_ServiceDesc, srv)
}

func _PackageService_CreatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).CreatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/CreatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).CreatePackage(ctx, req.(*CreatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/GetPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackage(ctx, req.(*GetPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackageByTrackingNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackageByTrackingNumberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackageByTrackingNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/GetPackageByTrackingNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackageByTrackingNumber(ctx, req.(*GetPackageByTrackingNumberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UpdatePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UpdatePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/UpdatePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UpdatePackage(ctx, req.(*UpdatePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_UpdatePackageStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePackageStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).UpdatePackageStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/UpdatePackageStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).UpdatePackageStatus(ctx, req.(*UpdatePackageStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_MarkPackageAsDelivered_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkPackageAsDeliveredRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).MarkPackageAsDelivered(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/MarkPackageAsDelivered",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).MarkPackageAsDelivered(ctx, req.(*MarkPackageAsDeliveredRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/DeletePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).DeletePackage(ctx, req.(*DeletePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_AssignToRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssignToRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).AssignToRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/AssignToRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).AssignToRoute(ctx, req.(*AssignToRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageService_GetPackagesByRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPackagesByRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageServiceServer).GetPackagesByRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/deliveryplanner.PackageService/GetPackagesByRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageServiceServer).GetPackagesByRoute(ctx, req.(*GetPackagesByRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageService_ServiceDesc is the grpc.ServiceDesc for PackageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "deliveryplanner.PackageService",
	HandlerType: (*PackageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePackage",
			Handler:    _PackageService_CreatePackage_Handler,
		},
		{
			MethodName: "GetPackage",
			Handler:    _PackageService_GetPackage_Handler,
		},
		{
			MethodName: "GetPackageByTrackingNumber",
			Handler:    _PackageService_GetPackageByTrackingNumber_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _PackageService_ListPackages_Handler,
		},
		{
			MethodName: "UpdatePackage",
			Handler:    _PackageService_UpdatePackage_Handler,
		},
		{
			MethodName: "UpdatePackageStatus",
			Handler:    _PackageService_UpdatePackageStatus_Handler,
		},
		{
			MethodName: "MarkPackageAsDelivered",
			Handler:    _PackageService_MarkPackageAsDelivered_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _PackageService_DeletePackage_Handler,
		},
		{
			MethodName: "AssignToRoute",
			Handler:    _PackageService_AssignToRoute_Handler,
		},
		{
			MethodName: "GetPackagesByRoute",
			Handler:    _PackageService_GetPackagesByRoute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/package.proto",
}
